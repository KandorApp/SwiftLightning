//
//  ChannelConfirmPresenter.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-25.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChannelConfirmPresentationLogic {
  func presentRefresh<C: Currency>(response: ChannelConfirm.Refresh.Response<C>)
  func presentOpenChannel(response: ChannelConfirm.OpenChannel.Response)
}


class ChannelConfirmPresenter: ChannelConfirmPresentationLogic {
  
  weak var viewController: ChannelConfirmDisplayLogic?
  
  // MARK: Refresh All
  
  func presentRefresh<C: Currency>(response: ChannelConfirm.Refresh.Response<C>) {

    let viewModel = ChannelConfirm.Refresh.ViewModel(fundingAmt: response.fundingAmt.formattedInSatoshis() + " sat",
                                                     refFundingAmt: "",
                                                     nodePubKey: response.nodePubKey,
                                                     nodeIP: response.nodeIP,
                                                     nodePort: String(response.nodePort),
                                                     initPayAmt: response.initPayAmt.formattedInSatoshis() + " sat",
                                                     refInitPayAmt: "",
                                                     confSpeed: response.confSpeed.description,
                                                     canPayAmt: response.canPayAmt.formattedInSatoshis() + " s",
                                                     canRcvAmt: response.canRcvAmt.formattedInSatoshis() + " s",
                                                     fee: "auto")
    
    viewController?.displayRefresh(viewModel: viewModel)
  }
  
  
  // MARK: Open Channel
  
  func presentOpenChannel(response: ChannelConfirm.OpenChannel.Response) {
    
    switch response.result {
    case .success:
      let viewModel = ChannelConfirm.OpenChannel.ViewModel(alertTitle: "Open Broadcasted",
                                                           alertMsg: "Lightning channel opening transaction have been broadcasted. It will take 3 confirmations before the channel can start to be used")
      viewController?.displayOpenChannelSubmitted(viewModel: viewModel)
      
    case .failure(let error):
      let viewModel = ChannelConfirm.OpenChannel.ErrorVM(errTitle: "Channel Error",
                                                         errMsg: error.localizedDescription)
      viewController?.displayOpenChannelFailure(viewModel: viewModel)
    }
  }
}
