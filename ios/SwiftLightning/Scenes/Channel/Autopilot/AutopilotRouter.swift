//
//  AutopilotRouter.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-06-10.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

@objc protocol AutopilotRoutingLogic {
  func routeToWalletMain()
  func routeToRootLocked()
}

protocol AutopilotDataPassing {
  var dataStore: AutopilotDataStore? { get }
}

class AutopilotRouter: NSObject, AutopilotRoutingLogic, AutopilotDataPassing {
  weak var viewController: AutopilotViewController?
  var dataStore: AutopilotDataStore?
  
  // MARK: Routing
  
  func routeToWalletMain() {
    //    let destinatoinVC = viewController! as! WalletMainViewController
    //    let destinatoinDS = destinationVC.router!.dataStore!
    //    passDataToWalletMain(source: dataStore!, destination: &destinationDS)
    navigateToWalletMain(source: viewController!)
  }

  func routeToRootLocked() {
    let destinationVC = AppDelegate.rootViewController!
    var destinationDS = destinationVC.router!.dataStore!
    passDataToRootLocked(source: dataStore!, destination: &destinationDS)
    navigateToRoot(source: viewController!)
  }
  
  
  // MARK: Navigation
  
  func navigateToWalletMain(source: AutopilotViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    navigationController.popViewController(animated: true)
  }
  
  func navigateToRoot(source: AutopilotViewController) {
    // Pop to Root and then start again
    AppDelegate.rootViewController?.dismiss(animated: false) {
      AppDelegate.rootViewController?.checkWalletUnlocked()
    }
  }
  
  
  // MARK: Passing data
  
  func passDataToWalletMain(source: AutopilotDataStore, destination: inout WalletMainDataStore) { }
  
  func passDataToRootLocked(source: AutopilotDataStore, destination: inout RootDataStore) {
    destination.walletUnlocked = false
  }
}
