//
//  ChannelOpenViewController.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-23.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChannelOpenDisplayLogic: class
{
  func displayChannelConfirm()
  func displayChannelConfirmError(viewModel: ChannelOpen.ChannelConfirm.ErrorVM)
}

class ChannelOpenViewController: SLViewController, ChannelOpenDisplayLogic
{
  var interactor: ChannelOpenBusinessLogic?
  var router: (NSObjectProtocol & ChannelOpenRoutingLogic & ChannelOpenDataPassing)?

  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ChannelOpenInteractor()
    let presenter = ChannelOpenPresenter()
    let router = ChannelOpenRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: View lifecycle
  
  @IBOutlet weak var formBottomConstraint: NSLayoutConstraint!
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    keyboardConstraint = formBottomConstraint
    keyboardConstraintMargin = formBottomConstraint.constant
  }
  
  override func viewDidLayoutSubviews() {
    super.viewDidLayoutSubviews()
    
    // TODO: Button should stay disabled until all entries are valid
    openChannelButton.backgroundColor = UIColor.medAquamarine
    openChannelButton.shadowColor = UIColor.medAquamarineShadow
    openChannelButton.setTitleColor(UIColor.normalText, for: .normal)
  }
  
  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    nodePubKeyEntryView.textField.becomeFirstResponder()
  }
  
  
  // MARK: Open Channel
  
  @IBOutlet weak var nodePubKeyEntryView: SLFormEntryView!
  @IBOutlet weak var nodePortIPEntryView: SLFormEntryView!
  @IBOutlet weak var fundingEntryView: SLFormEntryView!
  @IBOutlet weak var initPaymentEntryView: SLFormEntryView!
  @IBOutlet weak var openChannelButton: SLBarButton!
  
  @IBAction func openChannelTapped(_ sender: SLBarButton) {
    openChannel()
  }
  
  func openChannel() {
    let nodePubKeyString = nodePubKeyEntryView.textField.text ?? ""
    let nodePortIPString = nodePortIPEntryView.textField.text ?? ""
    let fundingAmtString = fundingEntryView.textField.text ?? ""
    let initPaymentString = initPaymentEntryView.textField.text ?? ""
    
    let request = ChannelOpen.ChannelConfirm.Request(nodePubKey: nodePubKeyString,
                                                     nodeIPPort: nodePortIPString,
                                                     fundingAmt: fundingAmtString,
                                                     initPayAmt: initPaymentString,
                                                     confSpeed: .normal)  // TODO: Actually let user set Confirmation Speed
    interactor?.channelConfirm(request: request)
  }
  
  func displayChannelConfirm() {
    DispatchQueue.main.async {
      self.router?.routeToChannelConfirm()
    }
  }
  
  func displayChannelConfirmError(viewModel: ChannelOpen.ChannelConfirm.ErrorVM) {
    let alertDialog = UIAlertController(title: viewModel.errTitle, message: viewModel.errMsg, preferredStyle: .alert).addAction(title: "OK", style: .default)
    DispatchQueue.main.async {
      self.present(alertDialog, animated: true, completion: nil)
    }
  }
  
  
  // MARK: Dismiss
  
  @IBAction func closeCrossTapped(_ sender: UIBarButtonItem) {
    router?.routeToWalletMain()
  }
}
