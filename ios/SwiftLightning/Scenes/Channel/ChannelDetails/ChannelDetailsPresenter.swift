//
//  ChannelDetailsPresenter.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-04.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChannelDetailsPresentationLogic {
  func presentRefresh(response: ChannelDetails.Refresh.Response)
  func presentConnect(response: ChannelDetails.Connect.Response)
  func presentClose(response: ChannelDetails.Close.Response)
}

class ChannelDetailsPresenter: ChannelDetailsPresentationLogic {
  weak var viewController: ChannelDetailsDisplayLogic?
  
  // MARK: Refresh
  
  func presentRefresh(response: ChannelDetails.Refresh.Response) {
    switch response.result {
    case .success(let chDetails):
      let channelVM = chDetails.channelVM
      let nodeVM = chDetails.nodeInfo
      
      var confHeight: String? = nil
      var closingTxID: String? = nil
      var blksTilMaturity: String? = nil
      var hideLeftButton = true
      var hideRightButton = true
      
      // Determine whether buttons should be unhidden
      switch channelVM.state {
      case .connected:
        hideRightButton = false
        
      case .disconnected:
        if let nodeVM = nodeVM, nodeVM.ipAddr != nil, nodeVM.port != nil {
          hideLeftButton = false
        }
        hideRightButton = false
      
      default:
        break
      }
      
      // Determine additional information
      if let addlInfo = channelVM.addlInfo {
        switch addlInfo {
        case .pendingOpen(let infoConfHeight):
          confHeight = String(infoConfHeight)
        case .pendingClose(let infoCloseTxID):
          closingTxID = infoCloseTxID
        case .forceClose(let blksLeft, let infoCloseTxID):
          blksTilMaturity = String(blksLeft)
          closingTxID = infoCloseTxID
        default:
          break
        }
      }
      
      let viewModel = ChannelDetails.Refresh.ViewModel(nodePubKey: channelVM.nodePubKey,
                                                       ipAddr: nodeVM?.ipAddr ?? "",
                                                       port: nodeVM?.port ?? "",
                                                       alias: nodeVM?.alias ?? "",
                                                       statusText: channelVM.statusText,
                                                       statusColor: channelVM.statusColor,
                                                       channelPoint: channelVM.channelPoint,
                                                       canPayAmt: channelVM.canPayAmt,
                                                       canRcvAmt: channelVM.canRcvAmt,
                                                       confHeight: confHeight,
                                                       closingTxID: closingTxID,
                                                       blksTilMaturity: blksTilMaturity,
                                                       leftButtonHidden: hideLeftButton,
                                                       rightButtonHidden: hideRightButton)
      
      viewController?.displayRefresh(viewModel: viewModel)
      
    case .failure(let error):
      let viewModel = ChannelDetails.ErrorVM(errTitle: "Node Info Error",
                                             errMsg: error.localizedDescription)
      viewController?.displayError(viewModel: viewModel)
    }
  }
  
  
  // MARK: Connect
  
  func presentConnect(response: ChannelDetails.Connect.Response) {
    switch response.result {
    case .success(()):
      let viewModel = ChannelDetails.Connect.ViewModel()
      viewController?.displayConnected(viewModel: viewModel)
    case .failure(let error):
      let viewModel = ChannelDetails.ErrorVM(errTitle: "Connect Error",
                                             errMsg: error.localizedDescription)
      viewController?.displayError(viewModel: viewModel)
    }
  }
  
  
  // MARK: Close
  
  func presentClose(response: ChannelDetails.Close.Response) {
    switch response.result {
    case .success(()):
      let viewModel = ChannelDetails.Close.ViewModel()
      viewController?.displayClosed(viewModel: viewModel)
    case .failure(let error):
      let viewModel = ChannelDetails.ErrorVM(errTitle: "Close Error",
                                             errMsg: error.localizedDescription)
      viewController?.displayError(viewModel: viewModel)
    }
  }
}
