//
//  ChannelDetailsModels.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-04.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum ChannelDetails {
  
  enum Error: LocalizedError {
    case channelListingError
    case noChannelPoint
    case cannotFindChannel
    case invalidChannelPoint
    case noChannelNodeInfo
    
    var localizedDescription: String {
      switch self {
      case .channelListingError:
        return NSLocalizedString("Cannot list all channels from LND", comment: "ChannelDetails.Error enum")
      case .noChannelPoint:
        return NSLocalizedString("No Channel Point supplied", comment: "ChannelDetails.Error enum")
      case .cannotFindChannel:
        return NSLocalizedString("Cannot find Channel for Channel Point", comment: "ChannelDetails.Error enum")
      case .invalidChannelPoint:
        return NSLocalizedString("Channel Point information invalid", comment: "ChannelDetails.Error enum")
      case .noChannelNodeInfo:
        return NSLocalizedString("No Channel/Node Information when expected", comment: "ChannelDetails.Error enum")
      }
    }
  }
  
  struct NodeInfo {
    var ipAddr: String?
    var port: String?
    var alias: String?
  }
  
  struct ChDetailInfo {
    var channelVM: ChannelVM
    var nodeInfo: NodeInfo?
  }
  
  enum Refresh {
    struct Request { }
    struct Response {
      var result: Result<ChDetailInfo>
    }
    struct ViewModel {
      var nodePubKey: String
      var ipAddr: String?
      var port: String?
      var alias: String?
      var statusText: String
      var statusColor: UIColor
      var channelPoint: String
      var canPayAmt: String
      var canRcvAmt: String
      var confHeight: String?
      var closingTxID: String?
      var blksTilMaturity: String?
      var leftButtonHidden: Bool
      var rightButtonHidden: Bool
    }
  }
  
  enum Connect {
    struct Request { }
    struct Response {
      var result: Result<Void>
    }
    struct ViewModel { }
  }
  
  enum Close {
    struct Request {
      var force: Bool
    }
    struct Response {
      var result: Result<Void>
    }
    struct ViewModel { }
  }
  
  struct ErrorVM {
    var errTitle: String
    var errMsg: String
  }
  

}
