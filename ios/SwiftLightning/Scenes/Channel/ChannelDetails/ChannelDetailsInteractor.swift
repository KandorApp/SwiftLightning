//
//  ChannelDetailsInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-04.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChannelDetailsBusinessLogic {
  func refresh(request: ChannelDetails.Refresh.Request)
  func connect(request: ChannelDetails.Connect.Request)
  func close(request: ChannelDetails.Close.Request)
  func subscribeEvents()
  func unsubscribeEvents()
}

protocol ChannelDetailsDataStore {
  var channelPoint: String? { get set }
}

class ChannelDetailsInteractor: ChannelDetailsBusinessLogic, ChannelDetailsDataStore
{
  var presenter: ChannelDetailsPresentationLogic?
  
  
  // MARK: Data Store
  
  var channelPoint: String?
  
  typealias ChDetailInfo = ChannelDetails.ChDetailInfo
  typealias NodeInfo = ChannelDetails.NodeInfo
  
  
  // MARK: Refresh
  
  private var channelInfo: ChannelVM?
  private var nodeInfo: NodeInfo?
  
  func refresh(request: ChannelDetails.Refresh.Request) {
    guard let channelPoint = channelPoint else {
      SLLog.assert("channelVM = nil in ChannelDetails interactor")
      let result = Result<ChDetailInfo>.failure(ChannelDetails.Error.noChannelPoint)
      let response = ChannelDetails.Refresh.Response(result: result)
      self.presenter?.presentRefresh(response: response)
      return
    }
    
    // Always grab Channel Information from Scratch
    ChannelVM.getFromLN { (chResponder) in
      do {
        let channels = try chResponder()
        
        // Find the Channel for given Channel Point
        guard let index = channels.index(where: { $0.channelPoint == channelPoint }) else {
          SLLog.warning("Cannot find Channel for Channel Point \(channelPoint)")
          let result = Result<ChDetailInfo>.failure(ChannelDetails.Error.cannotFindChannel)
          let response = ChannelDetails.Refresh.Response(result: result)
          self.presenter?.presentRefresh(response: response)
          return
        }
        
        let channel = channels[index]
        self.channelInfo = channel  // Save a copy in DataStore
        
        // Attempt to get Node Info for channel
        LNServices.getNodeInfo(pubKey: channel.nodePubKey) { (responder) in
          var chDetailInfo: ChDetailInfo
          
          do {
            let lnNodeInfo = try responder()
            var ipAddr: String? = nil
            var port: String? = nil
            
            if lnNodeInfo.address.count > 0 {
              let ipPort = lnNodeInfo.address[0].split(separator: ":")
              ipAddr = String(ipPort[0])
              port = String(ipPort[1])
            }
            
            let nodeInfo = NodeInfo(ipAddr: ipAddr, port: port, alias: lnNodeInfo.alias)
            self.nodeInfo = nodeInfo  // Save a copy in DataStore
            chDetailInfo = ChDetailInfo(channelVM: channel, nodeInfo: nodeInfo)
            
          } catch {
            SLLog.warning("Cannot get node info for channel")
            chDetailInfo = ChDetailInfo(channelVM: channel, nodeInfo: nil)
          }
          
          let result = Result<ChDetailInfo>.success(chDetailInfo)
          let response = ChannelDetails.Refresh.Response(result: result)
          self.presenter?.presentRefresh(response: response)
        }
        
      } catch {
        let result = Result<ChDetailInfo>.failure(ChannelDetails.Error.channelListingError)
        let response = ChannelDetails.Refresh.Response(result: result)
        self.presenter?.presentRefresh(response: response)
      }
    }
  }
  
  
  // MARK: Connect
  
  func connect(request: ChannelDetails.Connect.Request) {
    guard let channelInfo = channelInfo, let nodeInfo = nodeInfo, let ipAddr = nodeInfo.ipAddr,
      let portString = nodeInfo.port, let port = Int(portString) else {
      SLLog.assert("channel/nodeInfo = nil in ChannelDetails interactor")
      let result = Result<Void>.failure(ChannelDetails.Error.noChannelNodeInfo)
      let response = ChannelDetails.Connect.Response(result: result)
      self.presenter?.presentConnect(response: response)
      return
    }
    
    LNServices.connectPeer(pubKey: channelInfo.nodePubKey, hostAddr: ipAddr, hostPort: port) { (responder) in
      do {
        try responder()
        let response = ChannelDetails.Connect.Response(result: Result<Void>.success(()))
        self.presenter?.presentConnect(response: response)
        
      } catch {
        let result = Result<Void>.failure(error)
        let response = ChannelDetails.Connect.Response(result: result)
        self.presenter?.presentConnect(response: response)
      }
    }
  }
  
  
  // MARK: Close
  
  func close(request: ChannelDetails.Close.Request) {
    guard let channelInfo = channelInfo else {
      SLLog.assert("channelInfo = nil in ChannelDetails interactor")
      let result = Result<Void>.failure(ChannelDetails.Error.noChannelNodeInfo)
      let response = ChannelDetails.Close.Response(result: result)
      self.presenter?.presentClose(response: response)
      return
    }
    
    let channelPoint = channelInfo.channelPoint.split(separator: ":")
    
    guard channelPoint.count == 2 else {
      SLLog.assert("channelPoint.count != 2 in ChannelDetails interactor")
      let result = Result<Void>.failure(ChannelDetails.Error.invalidChannelPoint)
      let response = ChannelDetails.Close.Response(result: result)
      self.presenter?.presentClose(response: response)
      return
    }
    
    let fundingTxIDStr = String(channelPoint[0])
    let outputIndexStr = String(channelPoint[1])
    
    guard let outputIndex = UInt(outputIndexStr) else {
      SLLog.assert("channelPoint.count != 2 in ChannelDetails interactor")
      let result = Result<Void>.failure(ChannelDetails.Error.invalidChannelPoint)
      let response = ChannelDetails.Close.Response(result: result)
      self.presenter?.presentClose(response: response)
      return
    }
    
    LNServices.closeChannel(fundingTxIDStr: fundingTxIDStr,
                            outputIndex: outputIndex,
                            force: request.force,
                            completion: closeChannelCompletion)
  }
  
//  private func closeChannelStreaming(callHandle: () throws -> (Lnrpc_LightningCloseChannelCall)) {
//    do {
//      let _ = try callHandle()
//
//      // TODO: Pass to Stream Handler module for receive handling after the first stream
//
//      let response = ChannelDetails.Close.Response(result: Result<Void>.success(()))
//      presenter?.presentClose(response: response)
//    } catch {
//      // Counting on failures to come thru the Completion path instead of the Streaming path
//    }
//  }
  
  private func closeChannelCompletion(responder: () throws -> (LNCloseChannelUpdateType)) {
    do {
      let updateType = try responder()
      
      switch updateType {
      case .pending:
        let response = ChannelDetails.Close.Response(result: Result<Void>.success(()))
        presenter?.presentClose(response: response)
        
      default:
        // Hit the Event Center with this
        EventCentral.shared.channelCloseNotify()
      }
      
    } catch {
      SLLog.warning("Close Channel received error - \(error.localizedDescription)")
      
      // No idea what's going on, hit the Event Central anyways
      EventCentral.shared.channelCloseNotify()
      
      // This is the nay path if the Close Channel Scene still exists
      let response = ChannelDetails.Close.Response(result: Result<Void>.failure(error))
      presenter?.presentClose(response: response)
    }
  }
  
  
  // MARK: Event Subscriptions
  private var eventHandle: EventCentral.Handle?
  
  func subscribeEvents() {
    eventHandle = EventCentral.shared.subscribe(to: [.periodicUpdate, .openUpdate, .closeUpdate]) { (message) in
      self.refresh(request: ChannelDetails.Refresh.Request())
    }
  }
  
  func unsubscribeEvents() {
    if let handle = eventHandle {
      EventCentral.shared.unsubscribe(from: handle)
      self.eventHandle = nil
    }
  }
}
