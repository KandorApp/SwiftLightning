//
//  LNDDebugLevelInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-11.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LNDDebugLevelBusinessLogic {
  func fetchSubsystems(request: LNDDebugLevel.FetchSubsystems.Request)
  func changeDebugLevel(request: LNDDebugLevel.ChangeDebugLevel.Request)
}

protocol LNDDebugLevelDataStore {
  //var name: String { get set }
}

class LNDDebugLevelInteractor: LNDDebugLevelBusinessLogic, LNDDebugLevelDataStore {
  var presenter: LNDDebugLevelPresentationLogic?
  var worker: LNDDebugLevelWorker?
  
  
  // MARK: Fetch Subsystems
  
  func fetchSubsystems(request: LNDDebugLevel.FetchSubsystems.Request) {
    LNServices.debugLevel(show: true) { (responder) in
      do {
        guard let subsystemsString = try responder() else {
          throw LNDDebugLevel.Error.lnDebugLevelShowNoData
        }
        let subsystemsStrings = subsystemsString.trimmingCharacters(in: .whitespacesAndNewlines).split(separator: " ").map({ return String($0) })
        
        let result = Result<[String]>.success(subsystemsStrings)
        let response = LNDDebugLevel.FetchSubsystems.Response(result: result)
        self.presenter?.presentFetchSubsystems(response: response)
      } catch {
        let result = Result<[String]>.failure(error)
        let response = LNDDebugLevel.FetchSubsystems.Response(result: result)
        self.presenter?.presentFetchSubsystems(response: response)
      }
    }
  }
  
  // MARK: Change Debug Level
  func changeDebugLevel(request: LNDDebugLevel.ChangeDebugLevel.Request) {
    var debugLevelArg: String = ""
    
    if let systemLevel = request.systemLevel {
      debugLevelArg = systemLevel.string.lowercased()
      
    } else if let subsystemLevels = request.subsystemLevels {
      for (index, subsystemLevel) in subsystemLevels.enumerated() {
        if index != 0 { debugLevelArg += "," }
        debugLevelArg += "\(subsystemLevel.key)=\(subsystemLevel.value.string.lowercased())"
      }
    } else {
      SLLog.fatal("Both systemLevel & subsystemLevels = nil")
    }
    
    SLLog.debug("Changing LND Debug Level Spec to \(debugLevelArg)")
    
    LNServices.debugLevel(levelSpec: debugLevelArg) { (responder) in
      do {
        _ = try responder()
        
        // LND Debug Level change success. Now lets also change lnd.conf
        try LNManager.changeDebugLevel(withLevelSpec: debugLevelArg)
        
        let result = Result<Void>.success(())
        let response = LNDDebugLevel.ChangeDebugLevel.Response(result: result)
        self.presenter?.presentChangeDebugLevel(response: response)
      } catch {
        let result = Result<Void>.failure(error)
        let response = LNDDebugLevel.ChangeDebugLevel.Response(result: result)
        self.presenter?.presentChangeDebugLevel(response: response)
      }
    }
  }
}





