//
//  LNDDebugLevelViewController.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-11.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LNDDebugLevelDisplayLogic: class {
  func updateFetchSubsystems(viewModel: LNDDebugLevel.FetchSubsystems.ViewModel)
  func displayError(viewModel: LNDDebugLevel.ErrorVM)
}

class LNDDebugLevelViewController: SLViewController, LNDDebugLevelDisplayLogic, SLFormDebugLevelViewDelegate {
  var interactor: LNDDebugLevelBusinessLogic?
  var router: (NSObjectProtocol & LNDDebugLevelRoutingLogic & LNDDebugLevelDataPassing)?

  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = LNDDebugLevelInteractor()
    let presenter = LNDDebugLevelPresenter()
    let router = LNDDebugLevelRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: View lifecycle
  
  @IBOutlet weak var stackView: UIStackView!
  @IBOutlet weak var systemDebugLevelView: SLFormDebugLevelView!

  override func viewDidLoad() {
    super.viewDidLoad()
    systemDebugLevelView.delegate = self
    
    let request = LNDDebugLevel.FetchSubsystems.Request()
    interactor?.fetchSubsystems(request: request)
  }
  
  
  // MARK: Debug Level Views Delegate Conformance
  
  func stringsForLevel(_ debugLevelView: SLFormDebugLevelView) -> [String] {
    if debugLevelView === systemDebugLevelView {
      return LNDDebugLevel.Level.systemLevelsString
    } else {
      return LNDDebugLevel.Level.subsystemLevelsString
    }
  }
  
  func debugLevelViewExpanded(_ debugLevelView: SLFormDebugLevelView) {
    // Hide all other views
//    if debugLevelView != self.systemDebugLevelView {
//      self.systemDebugLevelView.togglePicker(forceHide: true)
//    }
//    for view in self.subsystemViews {
//      if debugLevelView != view {
//        view.togglePicker(forceHide: true)
//      }
//    }
    self.stackView.layoutIfNeeded()
  }
  
  func debugLevelView(_ debugLevelView: SLFormDebugLevelView, didSelectLevel level: Int) {
    if debugLevelView == systemDebugLevelView, let debugLevel = LNDDebugLevel.Level(rawValue: level+1) {  // +1 because not showing N/C for system picker
      if debugLevel == LNDDebugLevel.Level.individual {
        UIView.animate(withDuration: SLDesign.Constants.defaultTransitionDuration) {
          for view in self.subsystemViews { view.isHidden = false }
          self.stackView.layoutIfNeeded()
        }
      } else {
        UIView.animate(withDuration: SLDesign.Constants.defaultTransitionDuration) {
          for view in self.subsystemViews { view.isHidden = true }
          self.stackView.layoutIfNeeded()
        }
      }
    }
  }
  
  
  // MARK: Fetch Subsystems from LND
  
  private var subsystemViews = [SLFormDebugLevelView]()
  
  func updateFetchSubsystems(viewModel: LNDDebugLevel.FetchSubsystems.ViewModel) {
    DispatchQueue.main.async {
      guard let buttonView = self.stackView.arrangedSubviews.last else {
        SLLog.fatal("No last vew in stack")
      }
      self.stackView.removeArrangedSubview(buttonView)
    
      for subsystemString in viewModel.subsystems {
        let debugView = SLFormDebugLevelView()
        debugView.subSystemLabel.text = subsystemString
        debugView.setContentCompressionResistancePriority(.required, for: .vertical)
        debugView.delegate = self
        debugView.isHidden = true
        self.subsystemViews.append(debugView)
        self.stackView.addArrangedSubview(debugView)
      }
      self.stackView.addArrangedSubview(buttonView)
    }
  }
  
  func displayError(viewModel: LNDDebugLevel.ErrorVM) {
    DispatchQueue.main.async {
      let alertDialog = UIAlertController(title: viewModel.errTitle,
                                          message: viewModel.errMsg,
                                          preferredStyle: .alert).addAction(title: "OK", style: .default)
      self.present(alertDialog, animated: true, completion: nil)
    }
  }
  
  
  // MARK: Back Arrow Tapped
  
  @IBAction func backArrowTapped(_ sender: UIBarButtonItem) {
    router?.routeToSettingsMain()
  }
}
