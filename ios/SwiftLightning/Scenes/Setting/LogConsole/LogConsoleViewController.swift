//
//  LogConsoleViewController.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-12.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LogConsoleDisplayLogic: class {
  func displayLogText(viewModel: LogConsole.ReadLog.ViewModel)
  func displayLogExport(viewModel: LogConsole.GetLogURL.ViewModel)
  func displayError(viewModel: LogConsole.ErrorVM)
}


class LogConsoleViewController: SLViewController, LogConsoleDisplayLogic, UIScrollViewDelegate {
  var interactor: LogConsoleBusinessLogic?
  var router: (NSObjectProtocol & LogConsoleRoutingLogic & LogConsoleDataPassing)?

  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = LogConsoleInteractor()
    let presenter = LogConsolePresenter()
    let router = LogConsoleRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }

  
  // MARK: View lifecycle
  
  @IBOutlet weak var scrollView: UIScrollView!
  
  override func viewDidLoad(){
    super.viewDidLoad()
    scrollView.delegate = self
  }
  

  // MARK: Read Logs
  
  @IBOutlet weak var logDisplayTextView: UITextView!
  
  @IBAction func readWalletLogTapped(_ sender: SLBarButton) {
    let request = LogConsole.ReadLog.Request(logType: .wallet)
    interactor?.readLog(request: request)
  }
  
  @IBAction func readLNDLogTapped(_ sender: SLBarButton) {
    let request = LogConsole.ReadLog.Request(logType: .lnd)
    interactor?.readLog(request: request)
  }
  
  func displayLogText(viewModel: LogConsole.ReadLog.ViewModel) {
    DispatchQueue.main.async {
      let bottom = NSMakeRange(viewModel.displayText.count - 1, 1)
      self.logDisplayTextView.text = viewModel.displayText
      self.logDisplayTextView.scrollRangeToVisible(bottom)
    }
  }
  
  
  // MARK: Export Logs
  
  @IBAction func exportWalletLogTapped(_ sender: SLBarButton) {
    let request = LogConsole.GetLogURL.Request(logType: .wallet)
    interactor?.getLogURL(request: request)
  }
  
  @IBAction func exportLNDLogTapped(_ sender: SLBarButton) {
    let request = LogConsole.GetLogURL.Request(logType: .lnd)
    interactor?.getLogURL(request: request)
  }
  
  func displayLogExport(viewModel: LogConsole.GetLogURL.ViewModel) {
    let activityViewController = UIActivityViewController(activityItems: [viewModel.logURL] , applicationActivities: nil)
    DispatchQueue.main.async {
      self.present(activityViewController, animated: true, completion: nil)
    }
  }
  
  
  // MARK: Error Dialog
  
  func displayError(viewModel: LogConsole.ErrorVM) {
    DispatchQueue.main.async {
      let alertDialog = UIAlertController(title: viewModel.errTitle,
                                          message: viewModel.errMsg,
                                          preferredStyle: .alert).addAction(title: "OK", style: .default)
      self.present(alertDialog, animated: true, completion: nil)
    }
  }
  
  
  // MARK: Back Arrow
  
  @IBAction func backArrowTapped(_ sender: UIBarButtonItem) {
    router?.routeToSettingsMain()
  }
  
  
  // MARK: UIScrollViewDelegate Conformance
  
  func viewForZooming(in scrollView: UIScrollView) -> UIView? {
    return logDisplayTextView
  }
}

