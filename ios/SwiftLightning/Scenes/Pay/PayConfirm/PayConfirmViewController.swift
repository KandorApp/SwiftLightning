//
//  PayConfirmViewController.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-28.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PayConfirmDisplayLogic: class {
  func displayRefresh(viewModel: PayConfirm.Refresh.ViewModel)
  func displaySendPaymentSubmitted(viewModel: PayConfirm.SendPayment.ViewModel)
  func displaySendPaymentFailure(viewModel: PayConfirm.SendPayment.ErrorVM)
}


class PayConfirmViewController: UIViewController, PayConfirmDisplayLogic {
  
  var interactor: PayConfirmBusinessLogic?
  var router: (NSObjectProtocol & PayConfirmRoutingLogic & PayConfirmDataPassing)?

  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = PayConfirmInteractor()
    let presenter = PayConfirmPresenter()
    let router = PayConfirmRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    refresh()
  }
  
  override func viewDidAppear(_ animated: Bool) {
    super.viewDidAppear(animated)
    toLabelView.copyDialogSuperview = view
    descriptionLabelView.copyDialogSuperview = view
  }
  
  
  // MARK: Dismiss
  
  @IBAction func backTapped(_ sender: UIBarButtonItem) {
    router?.routeToPayMain()
  }
  
  @IBAction func cancelTapped(_ sender: SLBarButton) {
    router?.routeToPayMain()
  }
  
  
  // MARK: Update Confirm Scene
  
  @IBOutlet weak var headerView: SLFormHeaderView!
  @IBOutlet weak var sendLabelView: SLFormLabelView!
  @IBOutlet weak var toLabelView: SLFormLabelView!
  @IBOutlet weak var descriptionLabelView: SLFormLabelView!
  @IBOutlet weak var confirmationSpacer: UIView!
  @IBOutlet weak var confirmationLabelView: SLFormLabelView!
  @IBOutlet weak var paySummaryView: SLFormPaySummaryView!
  
  
  func refresh() {
    let request = PayConfirm.Refresh.Request()
    interactor?.refresh(request: request)
  }
  
  func displayRefresh(viewModel: PayConfirm.Refresh.ViewModel) {
    DispatchQueue.main.async {
      self.sendLabelView.textLabel.text = viewModel.amount
      self.toLabelView.textLabel.text = viewModel.address
      self.descriptionLabelView.textLabel.text = viewModel.description
      self.paySummaryView.sendAmtLabel.text = viewModel.amtToSend
      self.paySummaryView.feeAmtLabel.text = viewModel.fee
      self.paySummaryView.totalAmtLabel.text = viewModel.totalAmt
      
      switch viewModel.paymentType {
      case .lightning:
        self.headerView.iconImageView.image = UIImage(named: "BoltColored")
        self.headerView.headerLabel.text = "Confirm Lightning Payment"
        self.confirmationSpacer.isHidden = true
        self.confirmationLabelView.isHidden = true
      case .onChain:
        self.headerView.iconImageView.image = UIImage(named: "ChainColored")
        self.headerView.headerLabel.text = "Confirm On-Chain Payment"
        self.confirmationLabelView.textLabel.text = viewModel.confSpeed
        self.confirmationLabelView.isHidden = true
        self.confirmationSpacer.isHidden = true
      }
    }
  }
  
  
  // MARK: Payment Confirmed
  
  let activityIndicator = SLSpinnerDialogView()
  
  @IBAction func sendTapped(_ sender: SLBarButton) {
    activityIndicator.show(on: view)
    
    let request = PayConfirm.SendPayment.Request()
    interactor?.sendPayment(request: request)
  }

  func displaySendPaymentSubmitted(viewModel: PayConfirm.SendPayment.ViewModel) {
    let alertDialog = UIAlertController(title: viewModel.alertTitle,
                                        message: viewModel.alertMsg,
                                        preferredStyle: .alert).addAction(title: "OK", style: .default) { (alert) in
                                          
                                          DispatchQueue.main.async { self.router?.routeToWalletMain() }
    }
    
    DispatchQueue.main.async {
      self.activityIndicator.remove()
      self.present(alertDialog, animated: true)
    }
  }
  
  func displaySendPaymentFailure(viewModel: PayConfirm.SendPayment.ErrorVM) {
    let alertDialog = UIAlertController(title: viewModel.errTitle,
                                        message: viewModel.errMsg,
                                        preferredStyle: .alert).addAction(title: "OK", style: .default)
    DispatchQueue.main.async {
      self.activityIndicator.remove()
      self.present(alertDialog, animated: true)
    }
  }
}
















