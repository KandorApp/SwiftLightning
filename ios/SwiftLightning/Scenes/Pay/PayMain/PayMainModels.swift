//
//  PayMainModels.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-28.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum PayMain {
  
  // MARK: Error definitions
  
  enum Err: LocalizedError {
    case determineAddr
    case walletBalance
    
    var localizedDescription: String {
      switch self {
      case .determineAddr:
        return NSLocalizedString("Address parsing failed", comment: "PayMain.Err enum")
      case .walletBalance:
        return NSLocalizedString("Cannot obtain wallet balance", comment: "PayMain.Err enum")
      }
    }
  }
  
  enum AddrError: LocalizedError {
    case invalidAddr
    
    var localizedDescription: String {
      switch self {
      case .invalidAddr:
        return NSLocalizedString("Invalid address", comment: "PayMain.AddrError enum")
      }
    }
  }
  
  enum AmountError: LocalizedError {
    case amtMismatch
    case insufficient
    
    var localizedDescription: String {
      switch self {
      case .amtMismatch:
        return NSLocalizedString("Pay Req amount mismatch", comment: "PayMain.AmountError enum")
      case .insufficient:
        return NSLocalizedString("Insufficient funds", comment: "PayMain.AmountError enum")
      }
    }
  }
  
  enum Warning: LocalizedError {
    case noRouteFound
    
    var localizedDescription: String {
      switch self {
      case .noRouteFound:
        return NSLocalizedString("No route found to Lightning destination", comment: "PayMain.Warning enum")
      }
    }
  }
  
  
  // MARK: Validation Result
  
  struct ValidationResult {
    var paymentType: BitcoinPaymentType?
    var revisedAddress: String?
    var revisedAmount: Bitcoin?
    var payDescription: String?
    var fee: Bitcoin?
    var balance: Bitcoin?
    var addressError: PayMain.AddrError?
    var amountError: PayMain.AmountError?
    var routeError: Error?
    var error: Error?
    
    init(paymentType: BitcoinPaymentType? = nil,  // nil means can't resolve type
         revisedAddress: String? = nil,  // nil means don't replace
         revisedAmount: Bitcoin? = nil,  // nil means don't replace, payreq amount if error
         payDescription: String? = nil,  // nil means don't replace
         fee: Bitcoin? = nil,  // nil means no fee
         balance: Bitcoin? = nil,
         addressError: PayMain.AddrError? = nil,
         amountError: PayMain.AmountError? = nil,
         routeError: Error? = nil,
         error: Error? = nil) {
      
      self.paymentType = paymentType
      self.revisedAddress = revisedAddress
      self.revisedAmount = revisedAmount
      self.payDescription = payDescription
      self.fee = fee
      self.balance = balance
      self.addressError = addressError
      self.amountError = amountError
      self.routeError = routeError
      self.error = error
    }
  }
  
  
  // MARK: Validate Address
  
  enum Validate {
    struct Request {
      var rawAddressString: String
      var rawAmountString: String
    }
  }
  
  
  enum CheckURL {
    struct Request {}
    struct Response {
      var url: URL?
    }
    struct ViewModel {
      var paymentURL: String
    }
  }
  
  
  // MARK: Confirm Payment
  
  enum ConfirmPayment {
    struct Request {
      var rawAddressString: String
      var rawAmountString: String
      var description: String
    }
    struct ViewModel {
      var goToConfirm: Bool
    }
  }
  
  
  struct Response {
    var inputAddress: String
    var inputAmount: Bitcoin?
    var validationResult: ValidationResult
  }
  
  
  // MARK: Update View Models
  struct UpdateVM {
    var revisedAddress: String?
    var revisedAmount: String?
    var payDescription: String?
    var paymentType: BitcoinPaymentType?
    var fee: String
    var balance: String
  }
  
  // MARK: Error View Models
  
  struct AddressVM {
    var errMsg: String
  }
  
  struct AmountVM {
    var errMsg: String
  }
  
  struct WarningVM {
    var errMsg: String
  }
  
  struct ErrorVM {
    var errTitle: String
    var errMsg: String
  }
}
