//
//  PayMainModels.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-28.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum PayMain {
  
  enum Err: LocalizedError {
    case determineAddr
    case walletBalance
    
    var localizedDescription: String {
      switch self {
      case .determineAddr:
        return NSLocalizedString("Address parsing failed", comment: "PayMain.Err type")
      case .walletBalance:
        return NSLocalizedString("Cannot obtain wallet balance", comment: "PayMain.Err type")
      }
    }
  }
  
  enum AddrError: LocalizedError {
    case invalidAddr
    
    var localizedDescription: String {
      switch self {
      case .invalidAddr:
        return NSLocalizedString("Invalid address", comment: "PayMain.AddrError type")
      }
    }
  }
  
  enum AmountError: LocalizedError {
    case amtMismatch
    case insufficient
    
    var localizedDescription: String {
      switch self {
      case .amtMismatch:
        return NSLocalizedString("Pay Req amount mismatch", comment: "PayMain.AmountError")
      case .insufficient:
        return NSLocalizedString("Insufficient funds", comment: "PayMain.AmountError")
      }
    }
  }
  
  enum RouteError: LocalizedError {
    case noRouteFound
    
    var localizedDescription: String {
      switch self {
      case .noRouteFound:
        return NSLocalizedString("No route found to Lightning destination", comment: "PayMain.RouteError")
      }
    }
  }
  
  struct ValidationResult {
    var paymentType: BitcoinNetworkType?
    var revisedAddress: String?
    var revisedAmount: Bitcoin?
    var description: String?
    var fee: Bitcoin? = nil
    var addressError: PayMain.AddrError?
    var amountError: PayMain.AmountError?
    var routeError: Error?
    var error: Error?
    
    init(paymentType: BitcoinNetworkType? = nil,  // nil means can't resolve type
         revisedAddress: String? = nil,  // nil means don't replace
         revisedAmount: Bitcoin? = nil,  // nil means don't replace, payreq amount if error
         description: String? = nil,  // nil means don't replace
         fee: Bitcoin? = nil,  // nil means no fee
         addressError: PayMain.AddrError? = nil,
         amountError: PayMain.AmountError? = nil,
         routeError: Error? = nil,
         error: Error? = nil) {
      
      self.paymentType = paymentType
      self.revisedAddress = revisedAddress
      self.revisedAmount = revisedAmount
      self.description = description
      self.fee = fee
      self.addressError = addressError
      self.amountError = amountError
      self.routeError = routeError
      self.error = error
    }
  }
  
  enum ValidateAddress {
    struct Request {
      var rawAddressString: String
      var rawAmountString: String?
    }
    struct Response {
      var validationResult: ValidationResult
    }
    struct ViewModel {
      var revisedAddress: String
      var revisedAmount: String
    }
    struct WarningVM {
      var errMsg: String
    }
    struct RouteVM {
      var errMsg: String
    }
    struct ErrorVM {
      var errTitle: String
      var errMsg: String
    }
  }
  
  
  enum ValidateAmount {
    struct Request {
      var rawAddressString: String
      var rawAmountString: String
    }
    struct Response {
      var validationResult: ValidationResult
    }
    struct WarningVM {
      var errMsg: String
    }
    struct RouteVM {
      var errMsg: String
    }
    struct ErrorVM {
      var errTitle: String
      var errMsg: String
    }
  }
  
  
  // MARK: Confirm Payment
  
  enum ConfirmPayment {
    struct Request {
      var rawAddressString: String
      var rawAmountString: String
    }
    struct Response {
      var inputAddress: String
      var inputAmount: Bitcoin?
      var validationResult: ValidationResult
    }
    struct ViewModel {
      var revisedAddress: String?
      var revisedAmount: String?
      var goToConfirm: Bool
    }
    struct RouteVM {
      var errMsg: String
    }
    struct ErrorVM {
      var errTitle: String
      var errMsg: String
    }
  }
  
}
