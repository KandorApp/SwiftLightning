//
//  TransactionDetailsPresenter.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-08.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransactionDetailsPresentationLogic {
  func presentRefresh(response: TransactionDetails.Refresh.Response)
}


class TransactionDetailsPresenter: TransactionDetailsPresentationLogic {
  weak var viewController: TransactionDetailsDisplayLogic?

  // MARK: Refresh
  
  func presentRefresh(response: TransactionDetails.Refresh.Response) {

    switch response.result {
    case .success(let txDisplayType):
      var viewModel: TransactionDetails.Refresh.ViewModel
      
      switch txDisplayType {
      case .onChainTx(let transaction):
        
        let amountBitcoin = Bitcoin(inSatoshi: transaction.amount).formattedInSatoshis()
        let feesBitcoin = Bitcoin(inSatoshi: transaction.totalFees).formattedInSatoshis()
        let date = Date(timeIntervalSince1970: TimeInterval(transaction.timeStamp))
        let dateString = DateFormatter.localizedString(from: date, dateStyle: .medium, timeStyle: .medium)
        
        viewModel = TransactionDetails.Refresh.ViewModel(txType: .onChain,
                                                         txHeaderText: "Transaction Details",
                                                         txHashTitle: "Transaction Hash",
                                                         txHashText: transaction.txHash,
                                                         amountText: amountBitcoin,
                                                         feesText: feesBitcoin,
                                                         dateText: dateString,
                                                         confirmationsText: String(transaction.numConfirmations),
                                                         blockHeightText: String(transaction.blockHeight),
                                                         hashPreimageTitle: "Block Hash with Transaction",
                                                         hashPreimageText: transaction.blockHash,
                                                         destPathTitle: "Destination Addresses",
                                                         destPaths: transaction.destAddresses)
        
      case .lnPayment(let payment):
        
        let amountBitcoin = Bitcoin(inSatoshi: payment.value)
        let feesBitcoin = Bitcoin(inSatoshi: payment.fee)
        let date = Date(timeIntervalSince1970: TimeInterval(payment.creationDate))
        let dateString = DateFormatter.localizedString(from: date, dateStyle: .medium, timeStyle: .medium)
        
        viewModel = TransactionDetails.Refresh.ViewModel(txType: .lightning,
                                                         txHeaderText: "Payment Details",
                                                         txHashTitle: "Payment Hash",
                                                         txHashText: payment.paymentHash,
                                                         amountText: amountBitcoin.formattedInSatoshis(),
                                                         feesText: feesBitcoin.formattedInSatoshis(),
                                                         dateText: dateString,
                                                         confirmationsText: nil,
                                                         blockHeightText: nil,
                                                         hashPreimageTitle: "Payment Pre-Image",
                                                         hashPreimageText: payment.paymentPreimage,
                                                         destPathTitle: "Nodes routed thru",
                                                         destPaths: payment.path)
      }
      viewController?.displayRefresh(viewModel: viewModel)
      
    case .failure(let error):
      let viewModel = TransactionDetails.ErrorVM(errTitle: "Tx Details Error", errMsg: error.localizedDescription)
      viewController?.displayError(viewModel: viewModel)
    }
  }
}
