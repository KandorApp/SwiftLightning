//
//  TransactionDetailsInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-05-08.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TransactionDetailsBusinessLogic {
  func refresh(request: TransactionDetails.Refresh.Request)
  func subscribeEvents()
  func unsubscribeEvents()
}

protocol TransactionDetailsDataStore {
  var transactionType: BitcoinPaymentType? { get set }
  var transactionHash: String? { get set }
}

class TransactionDetailsInteractor: TransactionDetailsBusinessLogic, TransactionDetailsDataStore {
  var presenter: TransactionDetailsPresentationLogic?
  var worker: TransactionDetailsWorker?
  
  // MARK: Data Store
  
  var transactionType: BitcoinPaymentType?
  var transactionHash: String?
  
  
  // MARK: Refresh
  
  func refresh(request: TransactionDetails.Refresh.Request) {
    guard let transactionType = transactionType, let transactionHash = transactionHash else {
      SLLog.assert("transactionType = nil / transactionHash = nil")
      let result = Result<TransactionDetails.TxDisplayType>.failure(TransactionDetails.Error.noTransactionInput)
      let response = TransactionDetails.Refresh.Response(result: result)
      presenter?.presentRefresh(response: response)
      return
    }
    
    switch transactionType {
    case .onChain:
      LNServices.getTransactions { (responder) in
        do {
          let transactions = try responder()
          guard let index = transactions.index(where: { $0.txHash == transactionHash }) else {
            throw TransactionDetails.Error.transactionNotFound
          }
          let transaction = transactions[index]
          
          let result = Result<TransactionDetails.TxDisplayType>.success(.onChainTx(transaction))
          let response = TransactionDetails.Refresh.Response(result: result)
          self.presenter?.presentRefresh(response: response)
        } catch {
          let result = Result<TransactionDetails.TxDisplayType>.failure(error)
          let response = TransactionDetails.Refresh.Response(result: result)
          self.presenter?.presentRefresh(response: response)
        }
      }
      
    case .lightning:
      LNServices.listPayments { (responder) in
        do {
          let payments = try responder()
          guard let index = payments.index(where: { $0.paymentHash == transactionHash }) else {
            throw TransactionDetails.Error.transactionNotFound
          }
          let payment = payments[index]
          
          let result = Result<TransactionDetails.TxDisplayType>.success(.lnPayment(payment))
          let response = TransactionDetails.Refresh.Response(result: result)
          self.presenter?.presentRefresh(response: response)
          
        } catch {
          let result = Result<TransactionDetails.TxDisplayType>.failure(error)
          let response = TransactionDetails.Refresh.Response(result: result)
          self.presenter?.presentRefresh(response: response)
        }
      }
    }
  }
  
  
  // MARK: Event Subscription
  private var txEventHandle: EventCentral.Handle?
  
  func subscribeEvents() {
    // Lightning Payments are instant. No updates expected
    guard transactionType == .onChain else {
      return
    }
    
    SLLog.debug("Transaction Details Events Subscription")
    txEventHandle = EventCentral.shared.subscribe(to: [.periodicUpdate, .transaction]) { (message) in
      
      switch message {
      case .periodicUpdate:
        self.refresh(request: TransactionDetails.Refresh.Request())
        
      case .transaction(let transaction):
        guard let transactionHash = self.transactionHash, let transactionType = self.transactionType else {
          SLLog.assert("Not transaction info in Data Store")
          return
        }
        
        switch transactionType {
        case .onChain:
          SLLog.debug("Transaction Event \(transaction.txHash.prefix(10)) received. Displayed Transaction \(transactionHash.prefix(10))")
          if transactionHash == transaction.txHash {
            self.refresh(request: TransactionDetails.Refresh.Request())
          }
          
        default:
          SLLog.warning("Do not expect updates for LN Payment Details")
        }
        
      default:
        SLLog.assert("Did not subscribe to event type \(message)")
      }
    }
  }
  
  func unsubscribeEvents() {
    if let handle = txEventHandle {
      EventCentral.shared.unsubscribe(from: handle)
      self.txEventHandle = nil
    }
  }
}














