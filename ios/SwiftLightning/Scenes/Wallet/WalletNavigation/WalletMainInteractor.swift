//
//  WalletMainInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-20.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WalletMainBusinessLogic {
  func updateBalances(request: WalletMain.UpdateBalances.Request)
  func updateChannels(request: WalletMain.UpdateChannels.Request)
}

protocol WalletMainDataStore { }


class WalletMainInteractor: WalletMainBusinessLogic, WalletMainDataStore {
  
  var presenter: WalletMainPresentationLogic?
  
  // MARK: Update Balances
  
  func updateBalances(request: WalletMain.UpdateBalances.Request) {
    LNServices.walletBalance() { (walletResponder) in
      do {
        let onChainBalance = try walletResponder()
        let onChainBitcoin = Bitcoin(inSatoshi: onChainBalance.total)
        
        LNServices.channelBalance() { (channelResponder) in
          do {
            let channelBalance = try channelResponder()
            let channelBitcoin = Bitcoin(inSatoshi: channelBalance)
            
            let response = WalletMain.UpdateBalances.Response(onChainBalance: onChainBitcoin, channelBalance: channelBitcoin)
            self.presenter?.presentUpdatedBalances(response: response)

          } catch {
            let response = WalletMain.UpdateBalances.Response(onChainBalance: onChainBitcoin, channelBalance: nil)
            self.presenter?.presentUpdatedBalances(response: response)
          }
        }

      } catch {
        let response = WalletMain.UpdateBalances.Response(onChainBalance: nil, channelBalance: nil)
        self.presenter?.presentUpdatedBalances(response: response)
      }
    }
  }
  
  
  // MARK: Update Channels
  
  func updateChannels(request: WalletMain.UpdateChannels.Request) {
    
    // Get list of normal channels
    LNServices.listChannels { (listResponder) in
      do {
        let lists = try listResponder()

        // Get list of pending channels
        LNServices.pendingChannels { (pendingResponder) in
          do {
            let pendings = try pendingResponder()
            let channels = WalletMain.UpdateChannels.Channels(openedChannels: lists,
                                                              pendingOpenChannels: pendings.pendingOpen,
                                                              pendingCloseChannels: pendings.pendingClose,
                                                              pendingForceCloseChannels: pendings.pendingForceClose)
            
            let result = Result<WalletMain.UpdateChannels.Channels>.success(channels)
            let response = WalletMain.UpdateChannels.Response(result: result)
            self.presenter?.presentUpdatedChannels(response: response)
            
          } catch {
            let result = Result<WalletMain.UpdateChannels.Channels>.failure(error)
            let response = WalletMain.UpdateChannels.Response(result: result)
            self.presenter?.presentUpdatedChannels(response: response)
          }
        }
      
      } catch {
        let result = Result<WalletMain.UpdateChannels.Channels>.failure(error)
        let response = WalletMain.UpdateChannels.Response(result: result)
        self.presenter?.presentUpdatedChannels(response: response)
      }
    }
  }
}
