//
//  WalletMainRouter.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-20.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WalletMainRoutingLogic {
  func routeToPayMain()
  func routeToReceiveMain()
  func routeToChannelOpen()
  func routeToChannelDetails(channelPoint: String)
  func routeToTransactionDetails(type: BitcoinPaymentType, hash: String)
  func routeToSettingsMain()
  func routeToWalletBalance()
}

protocol WalletMainDataPassing {
  var dataStore: WalletMainDataStore? { get }
}

class WalletMainRouter: WalletMainRoutingLogic, WalletMainDataPassing {
  weak var viewController: WalletMainViewController?
  var dataStore: WalletMainDataStore?
  
  
  // MARK: Routing
  
  func routeToPayMain() {
    let storyboard = UIStoryboard(name: "PayMain", bundle: nil)
    let destinationVC = storyboard.instantiateViewController(withIdentifier: "PayMainViewController") as! PayMainViewController
    var destinationDS = destinationVC.router!.dataStore!
    passDataToPayMain(source: dataStore!, destination: &destinationDS)
    navigateToPayMain(source: viewController!, destination: destinationVC)
  }
  
  func routeToReceiveMain() {
    let storyboard = UIStoryboard(name: "ReceiveMain", bundle: nil)
    let destinationVC = storyboard.instantiateViewController(withIdentifier: "ReceiveMainViewController") as! ReceiveMainViewController
    var destinationDS = destinationVC.router!.dataStore!
    passDataToReceiveMain(source: dataStore!, destination: &destinationDS)
    navigateToReceiveMain(source: viewController!, destination: destinationVC)
  }
  
  func routeToChannelOpen() {
    let storyboard = UIStoryboard(name: "ChannelOpen", bundle: nil)
    let destinationVC = storyboard.instantiateViewController(withIdentifier: "ChannelOpenViewController") as! ChannelOpenViewController
    var destinationDS = destinationVC.router!.dataStore!
    passDataToChannelOpen(source: dataStore!, destination: &destinationDS)
    navigateToChannelOpen(source: viewController!, destination: destinationVC)
  }

  func routeToChannelDetails(channelPoint: String) {
    let storyboard = UIStoryboard(name: "ChannelDetails", bundle: nil)
    let destinationVC = storyboard.instantiateViewController(withIdentifier: "ChannelDetailsViewController") as! ChannelDetailsViewController
    var destinationDS = destinationVC.router!.dataStore!
    passDataToChannelDetails(channelPoint: channelPoint, destination: &destinationDS)
    navigateToChannelDetails(source: viewController!, destination: destinationVC)
  }
  
  func routeToTransactionDetails(type: BitcoinPaymentType, hash: String) {
    let storyboard = UIStoryboard(name: "TransactionDetails", bundle: nil)
    let destinationVC = storyboard.instantiateViewController(withIdentifier: "TransactionDetailsViewController") as! TransactionDetailsViewController
    var destinationDS = destinationVC.router!.dataStore!
    passDataToTransactionDetails(type: type, hash: hash, destination: &destinationDS)
    navigateToTransactionDetails(source: viewController!, destination: destinationVC)
  }
  
  func routeToSettingsMain() {
    let storyboard = UIStoryboard(name: "SettingsMain", bundle: nil)
    let destinationVC = storyboard.instantiateViewController(withIdentifier: "SettingsMainViewController") as! SettingsMainViewController
    var destinationDS = destinationVC.router!.dataStore!
    passDataToSettingsMain(source: dataStore!, destination: &destinationDS)
    navigateToSettingsMain(source: viewController!, destination: destinationVC)
  }
  
  func routeToWalletBalance() {
    let storyboard = UIStoryboard(name: "WalletBalance", bundle: nil)
    let destinationVC = storyboard.instantiateViewController(withIdentifier: "WalletBalanceViewController") as! WalletBalanceViewController
    var destinationDS = destinationVC.router!.dataStore!
    passDataToWalletBalance(source: dataStore!, destination: &destinationDS)
    navigateToWalletBalance(source: viewController!, destination: destinationVC)
  }
  
  
  // MARK: Navigation
  
  func navigateToPayMain(source: WalletMainViewController, destination: PayMainViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    destination.setPopTransition(dismissIsInteractive: true)
    navigationController.delegate = destination
    navigationController.pushViewController(destination, animated: true)
  }
  
  func navigateToReceiveMain(source: WalletMainViewController, destination: ReceiveMainViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    destination.setPopTransition(dismissIsInteractive: true)
    navigationController.delegate = destination
    navigationController.pushViewController(destination, animated: true)
  }
  
  func navigateToChannelOpen(source: WalletMainViewController, destination: ChannelOpenViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    destination.setPopTransition(dismissIsInteractive: true)
    navigationController.delegate = destination
    navigationController.pushViewController(destination, animated: true)
  }
  
  func navigateToChannelDetails(source: WalletMainViewController, destination: ChannelDetailsViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    destination.setPopTransition(dismissIsInteractive: true)
    navigationController.delegate = destination
    navigationController.pushViewController(destination, animated: true)
  }
  
  func navigateToTransactionDetails(source: WalletMainViewController, destination: TransactionDetailsViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    destination.setPopTransition(dismissIsInteractive: true)
    navigationController.delegate = destination
    navigationController.pushViewController(destination, animated: true)
  }
  
  func navigateToSettingsMain(source: WalletMainViewController, destination: SettingsMainViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    destination.setPopTransition(dismissIsInteractive: true)
    navigationController.delegate = destination
    navigationController.pushViewController(destination, animated: true)
  }
  
  func navigateToWalletBalance(source: WalletMainViewController, destination: WalletBalanceViewController) {
    guard let navigationController = source.navigationController else {
      SLLog.assert("\(type(of: source)).navigationController = nil")
      return
    }
    destination.setPopTransition(dismissIsInteractive: true)
    navigationController.delegate = destination
    navigationController.pushViewController(destination, animated: true)
  }
  
  
  // MARK: Passing data
  
  func passDataToPayMain(source: WalletMainDataStore, destination: inout PayMainDataStore) {
    // destination.name = source.name
  }
  
  func passDataToReceiveMain(source: WalletMainDataStore, destination: inout ReceiveMainDataStore) {
    // destination.name = source.name
  }
  
  func passDataToChannelOpen(source: WalletMainDataStore, destination: inout ChannelOpenDataStore) {
    // destination.name = source.name
  }
  
  func passDataToChannelDetails(channelPoint: String, destination: inout ChannelDetailsDataStore) {
    destination.channelPoint = channelPoint
  }
  
  func passDataToTransactionDetails(type: BitcoinPaymentType, hash: String, destination: inout TransactionDetailsDataStore) {
    destination.transactionHash = hash
    destination.transactionType = type
  }
  
  func passDataToSettingsMain(source: WalletMainDataStore, destination: inout SettingsMainDataStore) {
    // destination.name = source.name
  }
  
  func passDataToWalletBalance(source: WalletMainDataStore, destination: inout WalletBalanceDataStore) {
    // destination.name = source.name
  }
}
