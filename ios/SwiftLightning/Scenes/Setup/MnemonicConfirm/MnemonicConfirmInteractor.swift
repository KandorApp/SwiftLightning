//
//  MnemonicConfirmInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-19.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MnemonicConfirmBusinessLogic
{
  func genRandomIndices(request: MnemonicConfirm.GenRandomIndices.Request)
  func checkSeedWords(request: MnemonicConfirm.CheckSeedWords.Request)
  func confirmSeedWords(request: MnemonicConfirm.ConfirmSeedWords.Request)
}

protocol MnemonicConfirmDataStore
{
  //var name: String { get set }
}


class MnemonicConfirmInteractor: MnemonicConfirmBusinessLogic, MnemonicConfirmDataStore
{
  var presenter: MnemonicConfirmPresentationLogic?
  var worker: MnemonicConfirmWorker?
  
  private var wordIndicesToConfirm: [Int]?
  
  
  // MARK: Generate Random Indices
  
  func genRandomIndices(request: MnemonicConfirm.GenRandomIndices.Request) {
    wordIndicesToConfirm = SLRandValues.get(UInt32(MnemonicConfirm.Constants.wordsToConfirm), from: 0,
                                        to: UInt32(LNConstants.cipherSeedMnemonicWordCount - 1)).map { Int($0) }
    wordIndicesToConfirm!.sort()
    
    let response = MnemonicConfirm.GenRandomIndices.Response(wordIndices: wordIndicesToConfirm!)
    presenter?.presentGenRandomIndices(response: response)
  }
  
  
  // MARK: Check Seed Words
  
  func checkSeedWords(request: MnemonicConfirm.CheckSeedWords.Request) {
    let wordsCorrect = areSeedWordsCorrect(wordsToCheck: request.seedWords)
    let response = MnemonicConfirm.CheckSeedWords.Response(areSeedWordsCorrect: wordsCorrect)
    presenter?.presentCheckSeedWords(response: response)
  }
  
  
  private func areSeedWordsCorrect(wordsToCheck: [String]) -> [Bool] {
    guard let wordIndicesToConfirm = wordIndicesToConfirm else {
      SLLog.assert("Indices to confirm == nil?")
      return Array<Bool>(repeating: false, count: MnemonicConfirm.Constants.wordsToConfirm)
    }
    var areWordsCorrect = [Bool]()
    
    for (index, wordIndex) in wordIndicesToConfirm.enumerated() {
      let referenceWord = LNManager.getCipherSeedWord(index: wordIndex)
      areWordsCorrect.append(referenceWord == wordsToCheck[index])
    }
    return areWordsCorrect
  }
  
  
  // MARK: Confirm Seed Words
  
  func confirmSeedWords(request: MnemonicConfirm.ConfirmSeedWords.Request) {
    let wordsCorrect = areSeedWordsCorrect(wordsToCheck: request.seedWords)
    
    if wordsCorrect.contains(false) {
      let response = MnemonicConfirm.ConfirmSeedWords.Response(seedWordsCorrect: false)
      presenter?.presentConfirmSeedWords(response: response)
    } else {
      let response = MnemonicConfirm.ConfirmSeedWords.Response(seedWordsCorrect: true)
      presenter?.presentConfirmSeedWords(response: response)
    }
  }
}
