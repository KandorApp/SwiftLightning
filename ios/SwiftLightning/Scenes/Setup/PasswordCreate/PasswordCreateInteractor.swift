//
//  PasswordCreateInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-17.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PasswordCreateBusinessLogic
{
  func validatePasswords(request: PasswordCreate.ValidatePasswords.Request)
}

protocol PasswordCreateDataStore
{
  //var name: String { get set }
}

class PasswordCreateInteractor: PasswordCreateBusinessLogic, PasswordCreateDataStore
{
  var presenter: PasswordCreatePresentationLogic?
  var worker: PasswordCreateWorker?

  
  // MARK: Password Validation Logic. Worker not required?
  
  func validatePasswords(request: PasswordCreate.ValidatePasswords.Request) {
    
    let status = checkPasswordAndConfirmation(password: request.passwordText, confirmation: request.confirmText)
    let response = PasswordCreate.ValidatePasswords.Response(passwordFieldStatus: status.passwordStatus, confirmFieldStatus: status.confirmStatus)
    
    presenter?.presentSceneUpdate(response: response)
  }

  func doSomething() {
    worker = PasswordCreateWorker()
    worker?.doSomeWork()
  }
  
  private func checkPasswordAndConfirmation(password: String, confirmation: String) ->
    (passwordStatus: PasswordCreate.ValidatePasswords.ValidatePasswordStatusEnum, confirmStatus: PasswordCreate.ValidatePasswords.ValidateConfirmStatusEnum) {
      
    var passwordStatus: PasswordCreate.ValidatePasswords.ValidatePasswordStatusEnum
    
    if password.count < PasswordCreate.ValidatePasswords.Constants.minNumChar {
      passwordStatus = .needMoreCharacters
    }
    else if password.count > PasswordCreate.ValidatePasswords.Constants.maxNumChar {
      passwordStatus = .tooManyCharacters
    }
    else {
      passwordStatus = .passwordOk
    }
    
    var confirmStatus: PasswordCreate.ValidatePasswords.ValidateConfirmStatusEnum
    
    if confirmation.count == 0 || passwordStatus != .passwordOk {
      confirmStatus = .needsConfirmation
    } else if password != confirmation {
      confirmStatus = .passwordMismatch
    } else {
      confirmStatus = .confirmationOk
    }
    
    return (passwordStatus, confirmStatus)
  }
}
