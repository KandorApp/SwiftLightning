//
//  MnemonicDisplayViewController.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-18.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit


protocol MnemonicDisplayDisplayLogic: class
{
  func displayMnemonic(viewModel: MnemonicDisplay.ShowMnemonic.ViewModelSuccess)
  func displayMnemonicFailure(viewModel: MnemonicDisplay.ShowMnemonic.ViewModelFailure)
  func displayTimedButtonUpdate(viewModel: MnemonicDisplay.ButtonTimer.ViewModel)
}


class MnemonicDisplayViewController: UIViewController, MnemonicDisplayDisplayLogic
{
  var interactor: MnemonicDisplayBusinessLogic?
  var router: (NSObjectProtocol & MnemonicDisplayRoutingLogic & MnemonicDisplayDataPassing)?

  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MnemonicDisplayInteractor()
    let presenter = MnemonicDisplayPresenter()
    let router = MnemonicDisplayRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()

    let mnemonicRequest = MnemonicDisplay.ShowMnemonic.Request()
    interactor?.showMnemonic(request: mnemonicRequest)
    
    let timerRequest = MnemonicDisplay.ButtonTimer.Request()
    interactor?.startButtonTimer(request: timerRequest)
  }
  
  
  // MARK: Display Mnemonic
  
  @IBOutlet weak var mnemonicLeftStack: UIStackView!
  @IBOutlet weak var mnemonicRightStack: UIStackView!
  
  func displayMnemonic(viewModel: MnemonicDisplay.ShowMnemonic.ViewModelSuccess) {
    
    for (index, mnemonicWord) in viewModel.mnemonicWords.enumerated() {
      let numberedLabel = UILabel()
      numberedLabel.text = String("\(index+1).")
      numberedLabel.font = UIFont.semiBoldFont(18.0)
      numberedLabel.textColor = UIColor.normalText
      numberedLabel.textAlignment = .center
      numberedLabel.snp.makeConstraints { (make) -> Void in make.width.equalTo(40.0) }
      
      let wordLabel = UILabel()
      wordLabel.text = String(mnemonicWord)
      wordLabel.font = UIFont.semiBoldFont(18.0)
      wordLabel.textColor = UIColor.normalText
      wordLabel.textAlignment = .left
      // TODO: Autolayout?
      
      let numberedWordStack = UIStackView(arrangedSubviews: [numberedLabel, wordLabel])
      numberedWordStack.alignment = .fill
      numberedWordStack.distribution = .fill
      
      if index < viewModel.mnemonicWords.count/2 {
        mnemonicLeftStack.addArrangedSubview(numberedWordStack)
      } else {
        mnemonicRightStack.addArrangedSubview(numberedWordStack)
      }
    }
  }
  
  func displayMnemonicFailure(viewModel: MnemonicDisplay.ShowMnemonic.ViewModelFailure) {
    SLLog.warning(viewModel.errorMsg)
    let alertDialog = UIAlertController(title: viewModel.errorTitle,
                                        message: viewModel.errorMsg,
                                        preferredStyle: .alert).addAction(title: "OK", style: .default)
    DispatchQueue.main.async {
      self.present(alertDialog, animated: true, completion: nil)
    }
  }
  
  
  // MARK: Button Timer
  
  @IBOutlet weak var doneWritingButton: SLBarButton!

  func displayTimedButtonUpdate(viewModel: MnemonicDisplay.ButtonTimer.ViewModel) {
    DispatchQueue.main.async {
      self.doneWritingButton.setTitle(viewModel.buttonText, for: .normal)
      self.doneWritingButton.setTitleColor(viewModel.buttonTextColor, for: .normal)
      self.doneWritingButton.backgroundColor = viewModel.buttonColor
      self.doneWritingButton.shadowColor = viewModel.buttonShadowColor
      self.doneWritingButton.isEnabled = viewModel.buttonEnabled
    }
  }
  
  
  // MARK: Done Writing Tapped
  
  @IBAction func doneWritingTapped(_ sender: SLBarButton) {
    router?.routeToMnemonicConfirm()
  }
}
