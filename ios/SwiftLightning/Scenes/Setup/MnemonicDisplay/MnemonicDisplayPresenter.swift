//
//  MnemonicDisplayPresenter.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-18.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MnemonicDisplayPresentationLogic
{
  func presentMnemonic(response: MnemonicDisplay.ShowMnemonic.Response)
  func presentTimedButton(response: MnemonicDisplay.ButtonTimer.Response)
}

class MnemonicDisplayPresenter: MnemonicDisplayPresentationLogic
{
  weak var viewController: MnemonicDisplayDisplayLogic?
  
  // MARK: Do something
  
  func presentMnemonic(response: MnemonicDisplay.ShowMnemonic.Response)
  {
    if let mnemonic = response.mnemonicWords {
      let viewModel = MnemonicDisplay.ShowMnemonic.ViewModelSuccess(mnemonicWords: mnemonic)
      viewController?.displayMnemonic(viewModel: viewModel)
    } else {
      let viewModel = MnemonicDisplay.ShowMnemonic.ViewModelFailure(errorTitle: "Cannot Get Mnemonic", errorMsg: "Cannot get Cipher Seed Mnemonic. Please restart the app and try again.")
      viewController?.displayMnemonicFailure(viewModel: viewModel)
    }
  }
  
  func presentTimedButton(response: MnemonicDisplay.ButtonTimer.Response) {
    
    var viewModel: MnemonicDisplay.ButtonTimer.ViewModel
    
    if response.remainingTime == 0 {
      viewModel = MnemonicDisplay.ButtonTimer.ViewModel(buttonText: "Done Writing",
                                                        buttonTextColor: UIColor.normalText,
                                                        buttonEnabled: true,
                                                        buttonColor: UIColor.medAquamarine,
                                                        buttonShadowColor: UIColor.medAquamarineShadow)
    } else {
      viewModel = MnemonicDisplay.ButtonTimer.ViewModel(buttonText: "Minimum wait - \(response.remainingTime)s left",
                                                        buttonTextColor: UIColor.disabledText,
                                                        buttonEnabled: false,
                                                        buttonColor: UIColor.disabledGray,
                                                        buttonShadowColor: UIColor.disabledGrayShadow)
    }
    
    viewController?.displayTimedButtonUpdate(viewModel: viewModel)
  }
}
