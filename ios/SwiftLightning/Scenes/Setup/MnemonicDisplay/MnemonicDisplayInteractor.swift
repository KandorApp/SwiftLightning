//
//  MnemonicDisplayInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-18.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MnemonicDisplayBusinessLogic
{
  func showMnemonic(request: MnemonicDisplay.ShowMnemonic.Request)
  func startButtonTimer(request: MnemonicDisplay.ButtonTimer.Request)
}

protocol MnemonicDisplayDataStore
{
  //var name: String { get set }
}

class MnemonicDisplayInteractor: MnemonicDisplayBusinessLogic, MnemonicDisplayDataStore
{
  var presenter: MnemonicDisplayPresentationLogic?
  var worker: MnemonicDisplayWorker?

  var timeRemaining: UInt = 20
  
  
  // MARK: Mnemonic Display
  
  func showMnemonic(request: MnemonicDisplay.ShowMnemonic.Request)
  {
    guard let mnemonic = LNManager.cipherSeedMnemonic, mnemonic.count == LNConstants.cipherSeedMnemonicWordCount else {
      let response = MnemonicDisplay.ShowMnemonic.Response(mnemonicWords: nil)
      presenter?.presentMnemonic(response: response)
      return
    }
    
    let response = MnemonicDisplay.ShowMnemonic.Response(mnemonicWords: mnemonic)
    presenter?.presentMnemonic(response: response)
  }
  
  
  // MARK: - Button Timer
  
  func startButtonTimer(request: MnemonicDisplay.ButtonTimer.Request) {
    _ = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { (timer) in
      
      self.timeRemaining -= 1
      let response = MnemonicDisplay.ButtonTimer.Response(remainingTime: self.timeRemaining)
      self.presenter?.presentTimedButton(response: response)
      
      if self.timeRemaining == 0 {
        timer.invalidate()
      }
    }
    
    let response = MnemonicDisplay.ButtonTimer.Response(remainingTime: self.timeRemaining)
    presenter?.presentTimedButton(response: response)
  }
}
