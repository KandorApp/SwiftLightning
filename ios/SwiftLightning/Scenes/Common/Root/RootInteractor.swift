//
//  RootInteractor.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-20.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RootBusinessLogic
{
  func checkWalletUnlocked(request: Root.WalletPresenceRouting.Request)
  func confirmWalletUnlock(request: Root.ConfirmWalletUnlock.Request)
}

protocol RootDataStore
{
}

class RootInteractor: RootBusinessLogic, RootDataStore
{
  var presenter: RootPresentationLogic?
  var worker = RootWorker()
  
  private var walletUnlocked = false
  
  func checkWalletUnlocked(request: Root.WalletPresenceRouting.Request) {
    guard worker.checkWalletPresenceViaFile() else {
      let response = Root.WalletPresenceRouting.Response(walletPresent: false,
                                                         walletUnlocked: false)
      // If wallet is not present, just treat as if sync have never been achieved
      PersistentData.shared.set(false, forKey: .achievedFirstSync)
      
      self.presenter?.presentWalletPresenceRouting(response: response)
      return
    }
    
    let response = Root.WalletPresenceRouting.Response(walletPresent: true,
                                                       walletUnlocked: walletUnlocked)
    self.presenter?.presentWalletPresenceRouting(response: response)
  }
  
  func confirmWalletUnlock(request: Root.ConfirmWalletUnlock.Request) {
    
    // Increase retry count because unlock can take a while
    // Decrease retry delay so unlock process is more responsive
    LNServices.getInfo(retryCount: 20, retryDelay: 0.5) { (completion) in
      do {
        _ = try completion()
        
        // Track that wallet is unlocked
        self.walletUnlocked = true
        
        // Start Wallet Event Central
        EventCentral.shared.start { (result) in
          switch result {
          case .success(()):
            let response = Root.ConfirmWalletUnlock.Response(isWalletUnlocked: true)
            self.presenter?.presentConfirmWalletUnlock(response: response)
          case .failure(let error):
            SLLog.assert("Cannot start Wallet Event Central - \(error.localizedDescription)")
            let response = Root.ConfirmWalletUnlock.Response(isWalletUnlocked: false)
            self.presenter?.presentConfirmWalletUnlock(response: response)
          }
        }
      } catch {
        let response = Root.ConfirmWalletUnlock.Response(isWalletUnlocked: false)
        self.presenter?.presentConfirmWalletUnlock(response: response)
      }
    }
  }
}
