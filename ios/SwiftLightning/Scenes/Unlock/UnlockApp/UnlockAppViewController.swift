//
//  UnlockAppViewController.swift
//  SwiftLightning
//
//  Created by Howard Lee on 2018-04-20.
//  Copyright (c) 2018 BiscottiGelato. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit


protocol UnlockAppDisplayLogic: class {
  func displayWalletMain()
  func displayCheckPasswordFailure(viewModel: UnlockApp.CheckPassword.ViewModel)
}

class UnlockAppViewController: UIViewController, UnlockAppDisplayLogic, UITextFieldDelegate {
  var interactor: UnlockAppBusinessLogic?
  var router: (NSObjectProtocol & UnlockAppRoutingLogic & UnlockAppDataPassing)?

  
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = UnlockAppInteractor()
    let presenter = UnlockAppPresenter()
    let router = UnlockAppRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  
  // MARK: IBOutlet
  
  @IBOutlet weak var passwordField: SLPasswordField!
  @IBOutlet weak var bottomDistance: NSLayoutConstraint!
  
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    
    // Registering observer to adjust stack for keyboard height
    NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(_:)), name: NSNotification.Name.UIKeyboardWillShow, object: nil)

    // Configure SLPasswordField
    passwordField.unhideButton.isHidden = true
    passwordField.infoLabel.isHidden = true
    passwordField.textField.returnKeyType = .done
    passwordField.textField.delegate = self
  }
  
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(animated)
    passwordField.textField.becomeFirstResponder()
  }
  
  override func viewWillDisappear(_ animated: Bool) {
    super.viewWillDisappear(animated)
    passwordField.textField.resignFirstResponder()
  }
  
  
  // MARK: Keyboard Management
  
  @objc private func keyboardWillShow(_ notification: NSNotification) {
    if let keyboardSize = (notification.userInfo?[UIKeyboardFrameEndUserInfoKey] as? NSValue)?.cgRectValue {
      
      // Adjusting stack with height of the keyboard
      bottomDistance.constant = keyboardSize.height
    }
  }
  
  
  // MARK: TextField
  
  func textFieldShouldReturn(_ textField: UITextField) -> Bool {
    if let passwordText = textField.text {
      checkPasswordBlocking(passwordText: passwordText)
    }
    return false
  }
  
  
  // MARK: Check Password

  let activityIndicator = SLSpinnerDialogView()
  
  func checkPasswordBlocking(passwordText: String) {
    UIApplication.shared.beginIgnoringInteractionEvents()
    activityIndicator.show(on: view)
    
    let request = UnlockApp.CheckPassword.Request(passwordText: passwordText)
    interactor?.checkPassword(request: request)
  }
  
  func displayWalletMain() {
    DispatchQueue.main.async {
      self.activityIndicator.remove()
      UIApplication.shared.endIgnoringInteractionEvents()
      self.router?.routeToWalletThruRoot()
    }
  }
  
  func displayCheckPasswordFailure(viewModel: UnlockApp.CheckPassword.ViewModel) {
    let alertDialog = UIAlertController(title: viewModel.errorTitle, message: viewModel.errorMsg, preferredStyle: .alert).addAction(title: "OK", style: .default)
    
    // Present from RootVC so the keyboard won't disappear
    let rootViewController: UIViewController =
      UIApplication.shared.windows.last!.rootViewController!
    
    DispatchQueue.main.async {
      self.activityIndicator.remove()
      UIApplication.shared.endIgnoringInteractionEvents()
      rootViewController.present(alertDialog, animated: true, completion: nil)
    }
  }
}
